apiVersion: v1
kind: ServiceAccount
metadata:
  name: kok

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: application:kok
rules:
  - apiGroups:
      - "apps"
    resources:
      - deployments
      - statefulsets
      - replicasets
    verbs:
      - get
      - delete
      - create
      - patch
      - list
  - apiGroups:
      - ""
    resources:
      - namespaces
      - serviceaccounts
      - pods
      - services
      - persistentvolumeclaims
      - configmaps
      - secrets
      - endpoints
      - nodes
      - services
    verbs:
      - get
      - list
      - patch
      - create
      - delete
      - watch
  - apiGroups:
      - "storage.k8s.io"
    resources:
      - storageclasses
    verbs:
      - list
  - apiGroups:
      - "rbac.authorization.k8s.io"
    resources:
      - roles
      - rolebindings
      - clusterroles
      - clusterrolebindings
    verbs:
      - get
      - delete
      - create
      - patch
  - apiGroups:
      - "fluentd.fluent.io"
    resources:
      - clusteroutputs
      - clusterfluentdconfigs
    verbs:
      - delete
      - create
      - patch
  - nonResourceURLs:
    - "/metrics"
    verbs:
      - "get"
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: application:kok
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: application:kok
subjects:
  - kind: ServiceAccount
    name: kok
    namespace: {{ .Release.Namespace }}

---
apiVersion: v1
kind: Service
metadata:
  name: kok
spec:
  type: LoadBalancer
  selector:
    app: kok
  ports:
    - name: tcp-8080
      port: 8080
      targetPort: 8080

---
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: kok-vol
  labels:
    app: kok-vol
spec:
  storageClassName: nfs-client
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 1Gi

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: kok
  labels:
    app: kok
spec:
  replicas: 1
  selector:
    matchLabels:
      app: kok
  template:
    metadata:
      labels:
        app: kok
    spec:
      volumes:
        - name: kok-vol
          persistentVolumeClaim:
            claimName: kok-vol
      serviceAccount: kok
      containers:
        - name: kok
          image: "{{ .Values.hub }}:{{ .Values.tag }}"
          imagePullPolicy: Always
          volumeMounts:
            - name: kok-vol
              mountPath: /app/data
          ports:
            - name: tcp-8080
              containerPort: 8080
              protocol: TCP
          livenessProbe:
            initialDelaySeconds: 15
            periodSeconds: 5
            timeoutSeconds: 5
            httpGet:
              port: 8080
              path: /healthz
          readinessProbe:
            initialDelaySeconds: 15
            periodSeconds: 5
            timeoutSeconds: 5
            httpGet:
              port: 8080
              path: /healthz
          resources:
            limits:
              cpu: "1"
              memory: "500Mi"
            requests:
              cpu: "5m"
              memory: "50Mi"
          env:
            - name: TZ
              value: "Asia/Shanghai"
            - name: GIN_MODE
              value: "release"
            - name: PROMETHEUS_URL
              value: "{{ .Values.prometheus.url }}"
            - name: ELASTICSEARCH_URL
              value: "{{ .Values.elasticsearch.url }}"
            - name: DB_URL
              value: "{{ .Values.database.url }}"
            - name: DB_TYPE
              value: "{{ .Values.database.type }}"
            - name: ISTIO_INJECTION
              value: "{{ .Values.istio.injection }}"